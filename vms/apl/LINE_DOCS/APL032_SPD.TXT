PRODUCT NAME:  VAX APL, Version 3.2              SPD 25.31.10

DESCRIPTION

APL (A Programming Language) is a concise programming language that can be used 
for a wide range of applications.  It simplifies the handling of numeric and 
character data organized as lists and tables.

VAX APL is a native-mode, shareable, reentrant interpreter that runs under      
the VMS Operating System.  It provides a built-in function editor, debugging 
aids, system communication facilities and a file system.  VAX APL can execute 
lines of code immediately or store the code for later execution.

VAX APL uses virtual memory to create a "workspace" that can expand dynamically 
as needed and utilizes the VAX Floating Point and Character String 
instructions.

Features

^ Contains all of the APL primitive functions and operators described in 
  Development of an APL Standard by Falkoff and Orth in the APL79 
  Conference Proceedings.

^ Support for enclosed arrays, which allows any item of an array to be 
  another array.  VAX APL supports heterogeneous arrays (mixing numeric 
  and character values) and nested arrays to an arbitrary depth.  Strand 
  or vector notation can be used to create enclosed arrays.  The user can 
  control the display of enclosed arrays, including specifying spacing, 
  centering, and optional bordering.

^ VAX APL can invoke the VAXTPU system editor to do full-screen editing 
  of functions and data.  Both character and numeric data may be edited.
  The APL character set can be used with  the full-screen editor on 
  VT320, VT330, VT340, VT220, VT240, and VAXstation. 

^ Large workspaces are limited in size only by the available virtual 
  memory.  The space is allocated dynamically and may be constrained by 
  the user or system manager.

^ The symbol table and function (SI) stack are part of the workspace and 
  may grow dynamically as long as there is workspace available.

^ The VAX Record Management System (RMS) is used for file system input 
  and output.  VAX APL supports sequential, relative, keyed, and APL 
  component files. These files may be created or used by other VAX 
  languages that use RMS.

^ External routines (not written in APL) can be called from APL and 
  arguments passed to and value received from these external routines.        
  The VMS DEBUGGER can be used from inside VAX APL to debug these         
  external routines.  Performance monitoring of external routines is also     
  available with VAX PCA, a separately-purchased product.                     

^ Data may be shared between VAX APL processes via VMS mailboxes. The 
  data may also be shared between APL processes and programs written in 
  other languages that support mailboxes.  Event flags may be used to 
  synchronize data sharing.

^ End-of-line comments and the preservation of white space (including 
  spaces and tab characters) in input lines enable the user to document 
  and format functions for enhanced readability.

^ Line-oriented APL function editor and line editing of immediate mode 
  expressions is standard.

^ Detailed error messages give more information than traditional APL 
  messages.

^ Support for APL/ASCII typewriter-paired ASCII and APL/ASCII bit-paired 
  ASCII is provided.

^ A complete set of mnemonics allows access to the interpreter without 
  the use of a special terminal.

^ Support for the Workspace Interchange Convention, which makes it easier 
  to exchange workspaces with other APL products supporting Convention.

^ An execute-only, run-time support version of the APL interpreter is 
  available to run APL applications.

^ The Monadic Form Epsilon (.ep) has been disabled because this function 
  is available through other commands and we anticipate using it for a 
  different function in a later release. 

Language Extensions

^ Most primitive functions and operators have been extended to operate on     
  enclosed arrays.  The scalar primitive functions are pervasive so they   
  operate at the leaves of their arguments.  The primitive functions          
  "enclose", "disclose", "depth", "first", and "pick" are available to 
  create, interrogate, and manipulate enclosed arrays.

^ The operator "each" can produce a derived function that is applied to 
  the items of its arguments.  All of the primitive operators have been 
  extended to allow any primitive function, system function, user-defined 
  function, or derived function as an operand.  Identity and Fill 
  functions have been defined for the primitive functions.           

^ The execute function allows any APL character string to be evaluated 
  just as if it were entered at a terminal.  This includes system 
  commands and the function editor.

^ Diamond statement separators allow more than one expression on a line.

^ Take, Drop, and Ravel take a vector axis.  The set functions (union,        
  intersection, without, subset, contains, unique, match) are      
  available.

^ Ambivalent functions allow the user to define functions that can accept 
  either one or two arguments.

^ Replicate adds new capabilities to compression.  One expression can 
  eliminate elements, repeat elements, and add zeros or blanks to an          
  array.                                                                 

^ Relational (equal, greater than, etc.) and sorting functions can 
  operate on character as well as numeric data.  Dyadic grade allows the      
  user to specify a collating sequence to sort.

^ Boolean, integer, and D_floating internal data types.  G_ and H_ 
  floating are not supported internally.

System Commands

^ A complete set of APL system commands to query or to change the APL 
  system environment is available, including listing and deleting files 
  from disk, loading, saving and copying of VAX APL workspaces.  Commands 
  that work on identifiers take wildcard strings.

^ Any VMS Operating System command may be executed from immediate-mode or 
  from a running APL function via the )PUSH and )DO commands without 
  disturbing the APL process.  The )DO command may be used to place the 
  result of a VMS Operating System command into an APL variable.  The 
  variable would contain the text of what the VMS Operating System 
  normally displays on the terminal.  This variable may then be used for 
  further analysis. )ATTACH can be used to attach to a subprocess without 
  exiting APL.

^ Input may be taken from a command file via the )INPUT command.  Text in 
  the file is treated as if the user had typed the responses at the 
  terminal which allows for "batch-like" processing within the APL 
  environment.  VAX APL can be run under the VMS batch control system 
  with no modifications to APL workspaces or user input conventions.

^ Reports, text files and even a log of the work performed may be 
  transparently written to a file.  The )OUTPUT command directs 
  everything that would have appeared on the terminal to a file.  The 
  )OUTPUT/SHADOW command directs the output to both the terminal and to a 
  file.  The file looks the same as the output would look on a terminal, 
  complete with formatting and control characters.

^ )STEP allows function lines to be executed one at a time.

^ )EDIT invokes the VAXTPU system editor to do full-screen editing of         
  functions and data.

System Functions and Variables

^ A complete set of APL system variables to affect and to query the APL 
  workspace and system environments is provided.

^ A complete set of APL system functions to examine or to modify the APL 
  workspace environment, including creating local functions, accessing 
  information from the workspace symbol table, and loading and copying 
  VAX APL workspaces is available.

^ Flexible terminal output handling, includes the ability to send escape 
  sequences to the terminal.                                      

^ Flexible error handling enables the user to detect, analyze and correct 
  errors without interrupting the APL process.  These are implemented via 
  Quad-TRAP, Quad-ERROR, Quad-SIGNAL and Quad-BREAK.

^ Debugging aids are supplied to help find logic errors in a user 
  function.  Quad-TRACE enables display of the result of each requested 
  line of APL code.  Quad-STOP sets breakpoints in the code.  The user 
  may investigate the workspace and then resume execution from the 
  breakpoint. Quad-WATCH can be used to determine when a variable is 
  accessed or modified.  Quad-MONITOR can be used to determine CPU time 
  and execution counts for lines of a function.

^ Extensive formatting capabilities are available via Quad-FMT. Both 
  character and numeric data of various shapes may be combined using 
  powerful format descriptors to produce special-effect reports.

Run-Time Support Facility

The VAX APL product contains a run-time support facility that is an 
"execute only" version of APL; it does not support the interactive 
sessions or features necessary for APL program development.  You can use 
this "execute only" version of VAX APL to run APL applications on VMS 
systems that are not licensed to support VAX APL.  The "execute only" 
version of VAX APL can be copied to any valid VMS system free of charge.

HARDWARE REQUIREMENTS

VAX, MicroVAX or VAXstation configuration as specified in the System 
Support Addendum (SSA 25.31.10-x).

Terminal Support

VAX APL supports the APL character set on the VT300 Series, VT200 Series, 
and VAXstations terminals.  Refer to the SSA (SSA 25.31.10-x) for 
specifics.

SOFTWARE REQUIREMENTS*

For Systems Using Terminals (No DECwindows Interface):

^ VMS Operating System 

For Workstations Running VWS:

^ VMS Operating System 

^ VMS Workstation Software

For Workstations Running DECwindows:

^ VMS Operating System (and necessary components of VMS DECwindows)

*   Refer to the System Support Addendum (SSA 25.31.10-x) for 
    availability and required versions of prerequisite/optional software.

ORDERING INFORMATION

Software Licenses: QL-020A*-**
Software Media: QA-020A*-**
Software Documentation: QA-020AA-GZ
Software Product Services: QT-020A*-**

* Denotes variant fields. For additional information on available 
  licenses, services, and media, refer to the appropriate price book.

SOFTWARE LICENSING

This software is furnished under the licensing provisions of Digital 
Equipment Corporation's Standard Terms and Conditions. For more 
information about Digital's licensing terms and policies, contact your 
local Digital office.

LICENSE MANAGEMENT FACILITY SUPPORT 

This layered product supports the VMS License Management Facility.

License units for this product are allocated on a CPU-capacity plus 
User/Activity basis.

For more information on the License Management Facility, refer to the VMS 
Operating System Software Product Description (SPD 25.01.xx) or the 
License Management Facility manual of the VMS Operating System 
documentation set.

For more information about Digital's licensing terms and policies, 
contact your local Digital office.

SOFTWARE PRODUCT SERVICES

A variety of service options are available from Digital.  For more 
information, contact your local Digital office.

SOFTWARE WARRANTY

Warranty for this software product  is provided by Digital with the 
purchase of a license for the product as defined in the Software Warranty 
Addendum of this SPD. 


The DIGITAL Logo is a registered trademark of Digital Equipment Corporation.
    
VAX, VMS, MicroVAX, VAXserver, VAXstation and Ethernet are trademarks 
of Digital Equipment Corporation.
    
